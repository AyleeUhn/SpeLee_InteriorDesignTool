using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor (typeof(ChunkTags))]
public class ChunkTagsEditor : Editor {
	private ChunkTags tags;
	private bool isShowUserTags = false;
	private bool isShowAutoTags = false;

	void OnEnable(){
		tags = target as ChunkTags;
	}

	public override void OnInspectorGUI(){
		SerializedObject serTagObj = new SerializedObject (tags);
		SerializedProperty serTagList = serTagObj.FindProperty ("userGenerated");

		if (IsChunk) {
			EditorGUILayout.Space ();
			isShowAutoTags = EditorGUILayout.Foldout (isShowAutoTags, "Auto generated");
			if (isShowAutoTags) {
				foreach (TagInstance tag in tags.autoGenerated) {
					EditorGUILayout.LabelField (tag.Descriptor + ": " + tag.Name);
				}

				EditorGUILayout.Space ();
				EditorGUILayout.BeginHorizontal ();
				string autoUpdateState = tags.AutoUpdate ? "On" : "Off";

				if (!tags.AutoUpdate) {
					if (GUILayout.Button ("Update Tags")) {
						tags.UpdateTags ();
					}
				}

				if (GUILayout.Button ("Auto Update: " + autoUpdateState)) {
					tags.AutoUpdate = !tags.AutoUpdate;
				}
				EditorGUILayout.EndHorizontal ();
				EditorGUILayout.Space ();
			}

			isShowUserTags = EditorGUILayout.Foldout (isShowUserTags, "User defined");
		}
		if (isShowUserTags || !IsChunk) {
			for (int i = 0; i < serTagList.arraySize; i++) {
				EditorGUILayout.BeginHorizontal ();
				SerializedProperty serTagInstance = serTagList.GetArrayElementAtIndex (i);
				SerializedProperty serTagName = serTagInstance.FindPropertyRelative ("Name");
				serTagName.stringValue = EditorGUILayout.TextField (serTagName.stringValue);
				if (GUILayout.Button ("x", GUILayout.Width (20))) {
					serTagList.DeleteArrayElementAtIndex (i);
				}
				EditorGUILayout.EndHorizontal ();
			}
			if (GUILayout.Button ("New Tag")) {
				serTagList.InsertArrayElementAtIndex (serTagList.arraySize);
				SerializedProperty newlyCreated = serTagList.GetArrayElementAtIndex (serTagList.arraySize - 1);
				SerializedProperty newTagName = newlyCreated.FindPropertyRelative ("Name");
				newTagName.stringValue = "New Tag";
			}
		}

		serTagObj.ApplyModifiedProperties ();
	}

	private bool IsChunk{
		get{ return tags.gameObject.tag == "Chunk"; }
	}
}
